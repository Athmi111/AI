

def alpha_beta_search(state):
    def max_value(state, alpha, beta, path):
        print(f"MAX: Visiting state {state}, alpha={alpha}, beta={beta}")
        if terminal_test(state):
            print(f"MAX: Terminal state {state} has utility {utility(state)}")
            return utility(state), path
        v = float('-inf')
        best_path = []
        for action in actions(state):
            result_state = result(state, action)
            value, new_path = min_value(result_state, alpha, beta, path + [action])
            print(f"MAX: From state {state}, action {action} → value={value}")
            if value > v:
                v = value
                best_path = new_path
            if v >= beta:
                print(f"MAX: Pruning at state {state} with value={v} ≥ beta={beta}")
                return v, best_path
            alpha = max(alpha, v)
        print(f"MAX: Returning value={v} for state {state}")
        return v, best_path


    def min_value(state, alpha, beta, path):
        print(f"MIN: Visiting state {state}, alpha={alpha}, beta={beta}")
        if terminal_test(state):
            print(f"MIN: Terminal state {state} has utility {utility(state)}")
            return utility(state), path
        v = float('inf')
        best_path = []
        for action in actions(state):
            result_state = result(state, action)
            value, new_path = max_value(result_state, alpha, beta, path + [action])
            print(f"MIN: From state {state}, action {action} → value={value}")
            if value < v:
                v = value
                best_path = new_path
            if v <= alpha:
                print(f"MIN: Pruning at state {state} with value={v} ≤ alpha={alpha}")
                return v, best_path
            beta = min(beta, v)
        print(f"MIN: Returning value={v} for state {state}")
        return v, best_path


    print("Starting Alpha-Beta Search...\n")
    final_value, final_path = max_value(state, float('-inf'), float('inf'), [state])
    return final_value, final_path




def terminal_test(state):
    return state in terminal_states 


def utility(state):
    return terminal_states[state]


def actions(state):
    return game_tree.get(state, [])


def result(state, action):
    return action 


game_tree = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F', 'G'],
    'D': ['H','I'], 
    'E': ['J','K'],
    'F': ['L','M'],
    'G': ['N','O'],
    'H':[],
    'I':[],
    'J':[],
    'K':[],
    'L':[],
    'M':[],
    'N':[],
    'O':[]
}


terminal_states = {
    'H': 10, 
    'I': 9, 
    'J': 14, 
    'K': 18,  
    'L': 5,
    'M': 4,
    'N': 50,
    'O': 3
}


final_value, final_path = alpha_beta_search('A')
print("\n--- Final Results ---")
print(f"The final utility value is: {final_value}")
print(f"The final path taken is: {final_path}")










